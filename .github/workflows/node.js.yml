name: Node.js CI/CD

on:
  push:
    branches: ["master", "pipelines"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build and Push Docker Image
        id: build-image
        env:
          PUBLIC_ECR_REGISTRY: public.ecr.aws
          REGISTRY_ID: w1u7z6i9
          ECR_REPOSITORY: devnetwork-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image..."
          docker push $PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update ECS Service
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}                 
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}         
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          echo "Updating ECS service..."
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region $AWS_REGION

      - name: Update ECS Task Definition
        id: update-task-def
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}    
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}       
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}       
          ECS_TASK_DEFINITION: ${{ ECS_TASK_DEFINITION }}  
          CONTAINER_NAME: ${{ vars.ECS_SERVICE }}     
        run: |
          echo "Fetching current task definition..."
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          
          echo "Updating image in task definition..."
          NEW_TASK_DEF_JSON=$(echo $TASK_DEF_JSON | jq --arg IMAGE_URI "$image" '.containerDefinitions[0].image=$IMAGE_URI')

          echo "Registering new task definition..."
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF_JSON | aws ecs register-task-definition --cli-input-json file://<(echo "$NEW_TASK_DEF_JSON") | jq -r '.taskDefinition.taskDefinitionArn')
          
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
        run: |
          echo "Updating ECS service..."
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $task_def_arn --force-new-deployment --region $AWS_REGION

      - name: Wait for ECS Service to Stabilize
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
        run: |
          echo "Waiting for ECS deployment to complete..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION
