name: Node.js CI/CD

on:
  push:
    branches: ["master", "pipelines", "new-pipeline"]
  pull_request:
    branches: ["master"]
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  TASK_DEFINITION_FAMILY: ${{ vars.TASK_DEFINITION_FAMILY }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS Task Definition
        run: |
          # Get current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_FAMILY)
      
          # Create new task definition with updated image
          NEW_TASK_DEF=$(echo "$CURRENT_TASK_DEF" | jq \
            --arg IMAGE_URI "${{ env.IMAGE_URI }}" \
            --arg CONTAINER_NAME "${{ env.CONTAINER_NAME }}" \
            '.taskDefinition | 
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .registeredAt,
              .registeredBy,
              .compatibilities,
              .executionRoleArn  # Keep this if needed
            ) |
            .containerDefinitions |= map(if .name == $CONTAINER_NAME then .image = $IMAGE_URI else . end)')
      
          echo "$NEW_TASK_DEF" > new_task_definition.json
          
          # Register new revision
          aws ecs register-task-definition \
            --cli-input-json file://new_task_definition.json
      
          # Update service with explicit revision
          LATEST_REVISION=$(aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_FAMILY \
            --query 'taskDefinition.revision' \
            --output text)
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition "$TASK_DEFINITION_FAMILY:$LATEST_REVISION" \
            --force-new-deployment
