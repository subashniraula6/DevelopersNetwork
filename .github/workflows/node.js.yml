name: Node.js CI/CD

on:
  push:
    branches: ["master", "pipelines", "new-pipeline"]
  pull_request:
    branches: ["master"]
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: devnetwork-repo
  ECS_CLUSTER: devnetwork-cluster 
  TASK_DEFINITION_FAMILY: devnetwork-task
  ECS_SERVICE: devnetwork-service
  CONTAINER_NAME: "app"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Image
        run: |
          # Use only the Git SHA as tag
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV
          
          # Push both tags
          docker push ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Pass both tags to subsequent steps
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV
          echo "LATEST_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_ENV
     
      - name: Update ECS Task Definition
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY)
          
          # Update container image
          NEW_DEFINITION=$(echo "$TASK_DEFINITION" | jq \
            --arg IMAGE_URI "${{ env.IMAGE_URI }}" \
            --arg CONTAINER_NAME "${{ env.CONTAINER_NAME }}" \
            '.taskDefinition | 
            del(.status, .taskDefinitionArn, .requiresAttributes, .revision, .registeredAt, .registeredBy, .compatibilities) |
            .containerDefinitions[0].image = $IMAGE_URI')
          
          # Register new task definition
          echo "$NEW_DEFINITION" > new_task_definition.json
          aws ecs register-task-definition --cli-input-json file://new_task_definition.json

      - name: Force ECS Service Update
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
