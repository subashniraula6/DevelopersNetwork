name: Node.js CI/CD

on:
  push:
    branches: ["master", "pipelines"]
  pull_request:
    branches: ["master"]
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_NAME: devnetwork-repository
  ECS_CLUSTER_NAME: devnetworkk-ecs-cluster 
  ECS_SERVICE_NAME: devnetwork-ecs-service
  CONTAINER_NAME: devnetwork-node-container
  TASK_CPU: 256
  TASK_MEMORY: 512
  CONTAINER_PORT: 5000
  SUBNET_ID: subnet-00c694cbcfa0d0a6e
  SECURITY_GROUP_ID: sg-0b247670d4a78a6ae
  MONGO_URI: ${{ secrets.MONGO_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  GIT_HUB_CLIENT_ID: ${{ secrets.GIT_HUB_CLIENT_ID }}
  GIT_HUB_SECRET : ${{ secrets.GIT_HUB_SECRET }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup ECS Instance Role
        run: |
          # Create role and instance profile
          aws iam create-role \
            --role-name ecsInstanceRole \
            --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}' || true
          
          aws iam create-instance-profile \
            --instance-profile-name ecsInstanceProfile || true
          
          aws iam add-role-to-instance-profile \
            --instance-profile-name ecsInstanceProfile \
            --role-name ecsInstanceRole || true
          
          aws iam attach-role-policy \
            --role-name ecsInstanceRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      
      - name: Log in to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG" >> $GITHUB_ENV
     
      - name: Register ECS Task Definition
        id: register-task-def
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          TASK_DEFINITION=$(cat <<EOF
          {
            "family": "${{ env.ECS_SERVICE_NAME }}",
            "networkMode": "bridge",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "$IMAGE_URI",
                "essential": true,
                "memory": ${{ env.TASK_MEMORY }},
                "cpu": ${{ env.TASK_CPU }},
                "environment": [
                  {
                    "name": "NODE_ENV",
                    "value": "production"
                  },
                  {
                    "name": "MONGO_URI",
                    "value": "$MONGO_URI"
                  },
                  {
                    "name": "JWT_SECRET",
                    "value": "$JWT_SECRET"
                  },
                  {
                    "name": "GIT_HUB_CLIENT_ID",
                    "value": "$GIT_HUB_CLIENT_ID"
                  },
                  {
                    "name": "GIT_HUB_SECRET",
                    "value": "$GIT_HUB_SECRET"
                  }
                ],
                "portMappings": [
                  {
                    "containerPort": ${{ env.CONTAINER_PORT }},
                    "hostPort": ${{ env.CONTAINER_PORT }}
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["EC2"],
            "cpu": "${{ env.TASK_CPU }}",
            "memory": "${{ env.TASK_MEMORY }}"
          }
          EOF
          )
          echo "$TASK_DEFINITION" > task_definition.json
          cat task_definition.json | jq .
          aws ecs register-task-definition --cli-input-json file://task_definition.json

      - name: Create or Update ECS Cluster
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER_NAME }} \
          --query "clusters[0].status" --output text)
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }}
          fi

      # - name: Launch ECS Container Instance
      #   run: |
      #     # Create a user data script that sets the ECS cluster name
      #     echo '#!/bin/bash' > ecs-user-data.txt
      #     echo 'echo ECS_CLUSTER=${{ env.ECS_CLUSTER_NAME }} >> /etc/ecs/ecs.config' >> ecs-user-data.txt
      #     # Launch an EC2 instance using the ECS-optimized AMI (example AMI for us-east-1)
      #     aws ec2 run-instances \
      #       --image-id ami-05b10e08d247fb927 \
      #       --count 1 \
      #       --instance-type t2.micro \
      #       --iam-instance-profile Name="ecsInstanceRole" \
      #       --user-data file://ecs-user-data.txt \
      #       --subnet-id ${{ env.SUBNET_ID }} \
      #       --security-group-ids ${{ env.SECURITY_GROUP_ID }}
      - name: Validate Networking
        run: |
          # Check subnet is public
          SUBNET_PUBLIC=$(aws ec2 describe-subnets \
            --subnet-ids ${{ env.SUBNET_ID }} \
            --query 'Subnets[0].MapPublicIpOnLaunch' \
            --output text)
          
          if [ "$SUBNET_PUBLIC" = "False" ]; then
            echo "::error::Subnet must be public (MapPublicIpOnLaunch=true)"
            exit 1
          fi
      
      - name: Verify Security Group
        run: |
          aws ec2 describe-security-groups \
            --group-ids ${{ env.SECURITY_GROUP_ID }} \
            --query 'SecurityGroups[0].IpPermissions' \
            --output table  
            
      - name: Launch EC2 Instance with Retry
        run: |
          cat <<EOF > user-data.txt
          #!/bin/bash
          echo ECS_CLUSTER=${{ env.ECS_CLUSTER_NAME }} >> /etc/ecs/ecs.config
          yum install -y ecs-init
          service ecs start
          systemctl enable ecs
          EOF
          
          aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --count 1 \
            --instance-type t2.micro \
            --iam-instance-profile Name="ecsInstanceProfile" \
            --user-data file://user-data.txt \
            --subnet-id ${{ env.SUBNET_ID }} \
            --security-group-ids ${{ env.SECURITY_GROUP_ID }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=CI-CD-Instance}]'

      - name: Wait for Instance Registration
        timeout-minutes: 10  # Hard timeout for GitHub Actions
        run: |
          echo "Starting instance registration check..."
          end_time=$(( $(date +%s) + 600 ))  # 10-minute timeout
          
          while [ $(date +%s) -lt $end_time ]; do
            INSTANCE_COUNT=$(aws ecs list-container-instances \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --query 'length(containerInstanceArns)' \
              --output text)
            
            echo "Current registered instances: $INSTANCE_COUNT"
            
            if [ "$INSTANCE_COUNT" -ge 1 ]; then
              echo "Instance registered successfully!"
              exit 0
            fi
            
            # Check EC2 instance status
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=instance-type,Values=t2.micro" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].InstanceId' \
              --output text)
            
            if [ "$INSTANCE_ID" = "None" ]; then
              echo "::error::EC2 instance failed to start"
              exit 1
            fi
            
            sleep 30
          done
          
          echo "::error::Timeout: Instance never registered with ECS cluster"
          exit 1

      # ▼▼▼ Replace your current "Create or Update ECS Service" step with this ▼▼▼
      - name: Create or Update ECS Service
        run: |
          # Get latest task definition ARN
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE_NAME }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Check if service exists
          SERVICE_ARN=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} \
            --query 'services[0].serviceArn' \
            --output text)
          
          if [ "$SERVICE_ARN" = "None" ]; then
            echo "Creating new ECS service..."
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service-name ${{ env.ECS_SERVICE_NAME }} \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type EC2
          else
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service ${{ env.ECS_SERVICE_NAME }} \
              --task-definition "$TASK_DEF_ARN" \
              --force-new-deployment
          fi
