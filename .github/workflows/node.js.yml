name: Node.js CI/CD

on:
  push:
    branches: ["master", "pipelines"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Create ECR Repository if Not Exists
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: devnetwork-repository
        run: |
          echo "Checking if ECR repository exists..."
          if ! aws ecr describe-repositories --region $AWS_REGION --repository-names $ECR_REPOSITORY > /dev/null 2>&1; then
            echo "ECR repository does not exist. Creating..."
            aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
          else
            echo "ECR repository already exists."
          fi

      - name: Build and Push Docker Image
        id: build-image
        env:
          PUBLIC_ECR_REGISTRY: public.ecr.aws
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: devnetwork-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Retrieving dynamic REGISTRY_ID..."
          REGISTRY_ID=$(aws ecr-public describe-registries --region $AWS_REGION --query 'registries[0].registryId' --output text)
          echo "Using registry id: $REGISTRY_ID"
          echo "Building Docker image..."
          docker build -t $PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image..."
          docker push $PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$PUBLIC_ECR_REGISTRY/$REGISTRY_ID/$ECR_REPOSITORY:$IMAGE_TAG"

      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        working-directory: ./ecs-terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./ecs-terraform
        run: terraform apply -auto-approve \
              -var="container_image=${{ steps.build-image.outputs.image }}" \
              -var="env_config=${{ secrets.MY_CONFIG_JSON }}"
